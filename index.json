[
{
	"uri": "https://taiyaq.github.io/",
	"title": "Taiyaqとは",
	"tags": [],
	"description": "",
	"content": " Taiyaq Taiyaq(タイヤク)はプログラマ向けの翻訳サービスです。\nその名前に由来する通り、対訳を皆で共有して翻訳されたドキュメントを読む事ができます。このサービスを使うことで直接最新ライブラリのドキュメントや README を読むことができます。例えば、hyperpp のREADMEを直接日本語訳でよめます。\nみなさんが翻訳されたドキュメントを読む時に気にしていることは最新のパージョンのものを読んでいるのかどうかです。\n大抵ライブラリはバージョンが上がっていきドキュメントの内容も更新されていきます。\n翻訳はその後に行われるため、古い情報を参考にライブラリの使いかたを覚えることになりかねません。\n余計な二度手間を踏むことになかねません。例えばこんな感じです\n 質問 React.js の使いかたについて教えてください。以下のようなコードを書いたんですが、、、  import React from 'react'; var Parent = React.createClass({ getInitialState:function() { return { display: \u0026quot;none\u0026quot; } }, // 省略   解答 そもそも createClassを使うのば ES2015 においては推奨されていません  というようなやり取りです。\nそもそも React.js の本家のサイトを参照すればこんな質問が飛ぶことはありませんでした。\nつまりインターネットにおいては新旧が混在しているため正しい情報を得ることが難しいのです。翻訳ドキュメントは古いかもしれない情報を更に翻訳したものですから余計に不利となります。\nこれを解決したいと考えこのサービスが生まれました。\n"
},
{
	"uri": "https://taiyaq.github.io/concept/",
	"title": "仕組みについて",
	"tags": [],
	"description": "",
	"content": " そもそも技術ドキュメントは全ての記述を変更することはそれほど多くありません。大抵幾つかの仕様が変更されドキュメントの修正をそれに合わせたものになります。\n事前にドキュメントを分割して翻訳しておけば、変更された部分以外に関しては翻訳が既存のものを流用できるはずです。\n本サービスはそれを利用したものです。\nTaiyaq は以下のフローによって翻訳を進めていきます\nある翻訳したいサイトがあります。そこで新規の対訳作成を選ぶと以下の手順が始まります\n翻訳対象の分割 翻訳対象サイト を一定単位で分割します。同じコンテンツは同じ分割方法に従い毎回同じように分割されます。\nこれによって翻訳元となる情報を作成します\n分割情報のリンクをつくる 対訳は前後の関連も記憶しておきます。つまり一つの対訳は次のようになっています\n 翻訳対象とのリンク 翻訳対象の一つ前対象とのリンク 翻訳対象の一つ後ろの対象とのリンク  これは後述する翻訳処理で使われます。\n対訳の作成 上記分割した翻訳情報を翻訳して対訳をつくっていきます。\nこの情報をもとに対象サイトの翻訳を行います\n翻訳処理 翻訳処理は専用のブラウザ拡張機能によって進められます。ブラウザ拡張機能を使うことによって JS の処理系をサイト自身のものとは別系統で動かすことが可能となります。 Taiyaq は極力翻訳対象サイトを壊さないように TextNode だけを置き換えていきます。\n"
},
{
	"uri": "https://taiyaq.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://taiyaq.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]