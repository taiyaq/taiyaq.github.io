[
{
	"uri": "https://taiyaq.github.io/",
	"title": "Taiyaq",
	"tags": [],
	"description": "",
	"content": " Taiyaq Taiyaq(タイヤク)はプログラマ向けの翻訳サービスです。\nその名前に由来する通り、対訳を皆で共有して翻訳されたドキュメントを読む事ができます。このサービスを使うことで直接最新ライブラリのドキュメントや README を読むことができます。例えば、hyperapp のREADMEを直接日本語訳で読めます。\nプログラマーが翻訳されたドキュメントを読む際、気にしていることは最新のパージョンのものを読んでいるのか、という点です。大抵ライブラリはバージョンが上がっていきドキュメントの内容も更新されていきます。 翻訳はその後に行われるため、古い情報を参考にライブラリの使いかたを覚えはめになり余計な惨事を招くことになります。\n例えばこんな感じです。\n 質問 React.js の使いかたについて教えてください。以下のようなコードを書いたんですが、、、  import React from 'react'; var Parent = React.createClass({ getInitialState:function() { return { display: \u0026quot;none\u0026quot; } }, // 省略   解答 そもそも createClassを使うのば ES2015 においては推奨されていません  というようなやり取りです。\nそもそも React.js の本家のサイトを参照すればこんな質問が飛ぶことはありませんでした。\nつまりインターネットにおいては新旧が混在しているため正しい情報を得ることが難しいのです。翻訳ドキュメントは古い情報を更に翻訳したものですから余計に不利となります。プログラマーは常にこの古い可能性があるという点を気にしながらドキュメントを読んでいるのです。\nこれを解決したく、このサービスが生まれました。\n"
},
{
	"uri": "https://taiyaq.github.io/houtouse/extension/install/",
	"title": "インストール",
	"tags": [],
	"description": "",
	"content": "ブラウザの拡張機能は次のリンクからインストールできます。 ChromeWebストア\nアイコンが表示されればインストールは完了です。\n"
},
{
	"uri": "https://taiyaq.github.io/concept/",
	"title": "仕組みについて",
	"tags": [],
	"description": "",
	"content": " 技術ドキュメントは全ての記述を変更することは多くありません。大抵幾つかの仕様が変更され、ドキュメントの修正が行われます。\n事前にドキュメントを分割して翻訳しておけば、変更された部分以外に関しては翻訳が既存のものを流用できます。\n本サービスはそれを利用したものです。\n対訳作成の流れについて Taiyaq は、以下の手順で対訳の作成を進めていきます。\nある翻訳したいサイトがあります。そこで新規の対訳作成を選ぶと以下の手順が始まります。\n翻訳対象の分割 翻訳対象サイト を一定単位で分割します。同じコンテンツは同じ分割方法に従い毎回同じように分割されます。\nこれによって翻訳対象を分割します。\n分割情報のハッシュを作成する 対訳は前後の翻訳対象のハッシュも記憶しておきます。つまり 1 つの対訳は次の情報を対訳とは別に保持します。\n 翻訳対象のハッシュ 翻訳対象の 1 つ前のハッシュ 翻訳対象の 1 つ後ろのハッシュ  これは後述する翻訳処理で使われます。\n対訳の作成 上記分割した翻訳情報を翻訳して対訳をつくっていきます。\nこの情報をもとに対象サイトの翻訳を行います。\n翻訳の流れについて Taiyaq は以下の手順によって翻訳を行います。\nある翻訳したいサイトがあります。そこで翻訳を実行すると以下の手順が行われます。\n対象サイトの分割 翻訳対象サイト を一定単位で分割します。同じコンテンツは同じ分割方法に従い毎回同じように分割されます。(対訳作成の分割と同じ)\nこれによって翻訳元となる情報を作成します。\n対応する対訳を使った翻訳を実行 翻訳を行います。但し前述したハッシュ情報を使い大きく３つのパターンに分けて翻訳を実行します。\n対応する対訳の検出 (完全一致) これは前後の翻訳元のハッシュと翻訳対のハッシュ(3 つのハッシュ)が完全一致した場合に翻訳されます。完全一致なので最優先で翻訳を実行します。\n対応する対訳の検出 (2 箇所一致) これは前後何れかのハッシュが一致しない場合に翻訳を実行されます。これは前後何れかの翻訳元が変更された場合に実行されます。\n部分一致でも翻訳を行いますが完全一致の翻訳が全て終わり残った翻訳対象に対して実行されます。\n対応する対訳の検出 (前後不一致) 前後ともハッシュが一致しない場合に翻訳を実行しますこれは前述した完全一致, 2 個所一致 にて翻訳した残りの翻訳に対して実行されます。\nこの仕組みを逆用してタイトル、目次で共通の文言があった場合に敢えて未翻訳とすることで共通個所の翻訳に利用できます。\n 対応する対訳の検出 (全不一致) 全てのハッシュが一致しない場合に翻訳をしません。その対訳はもはや翻訳対象外となります。\n翻訳完了 上記ルールによって翻訳が実行されます。\n"
},
{
	"uri": "https://taiyaq.github.io/houtouse/extension/",
	"title": "ブラウザ拡張機能",
	"tags": [],
	"description": "",
	"content": "ブラウザの拡張機能には大きく２つの機能があります。\n 対訳の選択 対訳の作成  先ずインストールから始めます。\n"
},
{
	"uri": "https://taiyaq.github.io/houtouse/",
	"title": "使いかた",
	"tags": [],
	"description": "",
	"content": "この章では使いかたを確認します。\n"
},
{
	"uri": "https://taiyaq.github.io/houtouse/extension/select/",
	"title": "対訳の選択",
	"tags": [],
	"description": "",
	"content": "対訳の選択は対象のサイトをブラウザで開くところから始めます。\n例として以下のサイトを対訳してみます。 https://facebook.github.io/react-native/docs/using-a-scrollview.html\nサイトを開きTaiyaq-Extensionのiconをクリックし、サイドバーを開きます。\n初回ですとアカウントの作成が必要です お手数ですがログインをクリックして下さい。\n対訳情報がなければ以下のように新規作成ボタンを押して対訳の作成を行うしかありません。 対訳の作成手順はこちらを参照下さい。\nもし対訳が存在するなら以下のように表示します。\n翻訳ボタンを押すと翻訳できます。\n翻訳が完了します。\n次回からこの翻訳が自動で適用されます。\nもしそれが困るようでしたら再度同じ箇所をクリックして翻訳を解除して下さい。\n最後に、もし良い翻訳だと感じたらlikeボタンを忘れずに押して下さい。\n"
},
{
	"uri": "https://taiyaq.github.io/houtouse/extension/create/",
	"title": "対訳の作成",
	"tags": [],
	"description": "",
	"content": " 以下のサイトを翻訳してみます。\nhttps://facebook.github.io/react-native/docs/using-a-scrollview.html\nブラウザから上記リンクを開いて下さい。\n対訳の作成 以下のように、1,2,3の順でクリックして新規の対訳情報を作成します。\n以下のように翻訳の準備ができればokです。\n編集対象を絞り込む 沢山の対訳情報が揃いましたが、どれから翻訳すればいいか迷うはずです。\nそこでサイドバーを開いた状態で翻訳したい部分をクリックしてみて下さい。\n自動でフィルタ条件が設定され該当の対訳情報が絞り込まれます。\nこれはうまく機能しない場合もあります。 その場合はフィルタ条件にヒットしそうな文字列を入力してみます。\n上手く絞りこめるはずです。 絞り込まれない場合はもう少し単語の数を減らしてみて下さい。\n対訳編集 該当の対訳を見つけたら実際に翻訳してみます。\nところで、翻訳を手動で行うのは大変なので便利なエクステンションを使いましょう。\ngoogle翻訳です\nこれを使うと文章単位で翻訳できます。 ご覧の通り。結構使えます。 これをコピーしましょう。\nただコピーするだけだと保存できない場合があります。今回はエラーが出ていますね。 対訳情報は特殊構文になっておりその通りにしないと保存できません。\n今回ペースとなる英文は以下のように設定されています。\nThe\u0026lt;1\u0026gt;ScrollView\u0026lt;/1\u0026gt;is a generic scrolling container that can host multiple components and views. The scrollable items need not be homogeneous, and you can scroll both vertically and horizontally (by setting the\u0026lt;2\u0026gt;horizontal\u0026lt;/2\u0026gt;property).  ScrollViewとhorizontalが特殊なタグ \u0026lt;数値\u0026gt; \u0026lt;/数値\u0026gt; で囲まれています。 HTMLにおいて強調表示だったりリンクだった部分です。 翻訳時もその情報を対訳に付与する必要があるため、該当する単語に同じタグを割り当てて下さい。\n今回は以下のような対訳を設定しました。保存できるようになっているので忘れずにSaveを押して下さい。\n\u0026lt;1\u0026gt;ScrollView\u0026lt;/1\u0026gt;は、複数のコンポーネントとビューをホストできる一般的なスクロールコンテナです。スクロール可能なアイテムは同種である必要はなく、（\u0026lt;2\u0026gt;horizo​​ntal\u0026lt;/2\u0026gt;プロパティを設定することによって）垂直方向と水平方向の両方でスクロールすることができます。  翻訳を押すと翻訳されます。\n簡単ですね。ちなみに \u0026lt;br\u0026gt;だけは特別使うことができます。\n見た目として改行が必要だと思ったら入れてみて下さい。(但し、使えない場所もあります。) 上記はもちろんだめな例です。見た目が良くなるように上手く使ってみて下さい。\n次の対訳に移動する 図のように上記はボタンになっており次の翻訳への移動に使うことができます。\n上手く使って作業の効率化を図って下さい。\n対訳のアップロード 対訳の作成が一通り終わったらアップロードしてみましょう。\n追加情報の登録 上記のように自作翻訳をクリックして詳細編集を選んで下さい。\nタイトルとTagを設定して下さい。\n今回は以下のように設定しました。\n   種別 内容     タイトル React-native ScrollViewの説明の翻訳   Tags React.js, JavaScript    としてます。\n公開状態 にチェックを入れると公開されます。 ドキュメントのライセンス状態を確認してからチェックを入れるか作者に許可をもらうことを推奨します。\nDescription には、どうして翻訳したかを記入しておくと良いでしょう。\nアップロードをクリックして下さい。\n再度、アップロードをクリックして下さい。\nアップロードが完了しました。ありがとうございます。\n"
},
{
	"uri": "https://taiyaq.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://taiyaq.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]