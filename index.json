[
{
	"uri": "https://taiyaq.github.io/",
	"title": "Taiyaqとは",
	"tags": [],
	"description": "",
	"content": " Taiyaq Taiyaq(タイヤク)はプログラマ向けの翻訳サービスです。\nその名前に由来する通り、対訳を皆で共有して翻訳されたドキュメントを読む事ができます。このサービスを使うことで直接最新ライブラリのドキュメントや README を読むことができます。例えば、hyperpp のREADMEを直接日本語訳でよめます。\nみなさんが翻訳されたドキュメントを読む時に気にしていることは最新のパージョンのものを読んでいるのかどうかです。\n大抵ライブラリはバージョンが上がっていきドキュメントの内容も更新されていきます。\n翻訳はその後に行われるため、古い情報を参考にライブラリの使いかたを覚えることになりかねません。\n余計な二度手間を踏むことになかねません。例えばこんな感じです\n 質問 React.js の使いかたについて教えてください。以下のようなコードを書いたんですが、、、  import React from 'react'; var Parent = React.createClass({ getInitialState:function() { return { display: \u0026quot;none\u0026quot; } }, // 省略   解答 そもそも createClassを使うのば ES2015 においては推奨されていません  というようなやり取りです。\nそもそも React.js の本家のサイトを参照すればこんな質問が飛ぶことはありませんでした。\nつまりインターネットにおいては新旧が混在しているため正しい情報を得ることが難しいのです。翻訳ドキュメントは古いかもしれない情報を更に翻訳したものですから余計に不利となります。\nこれを解決したいと考えこのサービスが生まれました。\n"
},
{
	"uri": "https://taiyaq.github.io/concept/",
	"title": "仕組みについて",
	"tags": [],
	"description": "",
	"content": " 技術ドキュメントは全ての記述を変更することは多くありません。大抵幾つかの仕様が変更され、ドキュメントの修正をそれに合わせたものになります。\n事前にドキュメントを分割して翻訳しておけば、変更された部分以外に関しては翻訳が既存のものを流用できるはずです。\n本サービスはそれを利用したものです。\n対訳作成の流れについて Taiyaq は以下のフローによって対訳の作成を進めていきます\nある翻訳したいサイトがあります。そこで新規の対訳作成を選ぶと以下の手順が始まります\n翻訳対象の分割 翻訳対象サイト を一定単位で分割します。同じコンテンツは同じ分割方法に従い毎回同じように分割されます。\nこれによって翻訳元となる情報を作成します\n分割情報のハッシュを作成する 対訳は前後の翻訳対象のハッシュも記憶しておきます。つまり一つの対訳は次の情報を対訳とは別に保持します。\n 翻訳対象のハッシュ 翻訳対象の一つ前対象のハッシュ 翻訳対象の一つ後ろの対象のハッシュ  これは後述する翻訳処理で使われます。\n対訳の作成 上記分割した翻訳情報を翻訳して対訳をつくっていきます。\nこの情報をもとに対象サイトの翻訳を行います\n翻訳の流れについて Taiyaq は以下のフローによって翻訳を行います。\nある翻訳したいサイトがあります。そこで翻訳を実行しようとすると以下の手順が実行されます。\n対象サイトの分割 翻訳対象サイト を一定単位で分割します。同じコンテンツは同じ分割方法に従い毎回同じように分割されます。(対訳作成の分割と同じ)\nこれによって翻訳元となる情報を作成します\n対応する対訳を使った翻訳を実行 翻訳を行います。但し前述したハッシュ情報を使い大きく３つのパターンに分けて翻訳を実行します\n対応する対訳の検出 (完全一致) これは前後の翻訳元のハッシュと翻訳対のハッシュ(3 つのハッシュ)が完全一致した場合に翻訳されます。完全一致なので最優先で翻訳を実行します。\n対応する対訳の検出 (2 箇所一致) これは前後何れかのハッシュが逸しない場合に翻訳を実行されます。これは前後何れかの翻訳元が変更された場合に実行されます。\n部分一致でも翻訳を行いますが完全一致の翻訳が全て終わり残った翻訳対象に対して実行されます。\n対応する対訳の検出 (前後不一致) 前後ともハッシュが一致しない場合に翻訳を実行しますこれは前述した完全一致, 2 個所一致 にて翻訳した残りの翻訳に対して実行されます。\nこの仕組みを逆用してタイトル、目次で共通の文言があった場合に敢えて未翻訳とすることで共通個所の翻訳に利用することができます。\n 対応する対訳の検出 (全不一致) 全てのハッシュが一致しない場合に翻訳をしません。その対訳はもはや翻訳対象外となります。\n翻訳完了 上記ルールによって翻訳が実行されます。\n"
},
{
	"uri": "https://taiyaq.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://taiyaq.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]